knitr::opts_chunk$set(echo = TRUE)
library(Biostrings)
library(circlize)
library(data.table)
library(dplyr)
# cargar los datos blastn en formato tabular
blastn <- read.table("~/clavibacter/blast/outputs/NC_009480.1_Clavibacter_michiganensis_complete/SRR11092512_solanum_lycopersicum_ags1-clav_1", header = FALSE, sep = "\t", stringsAsFactors = FALSE, col.names= c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen","qstart", "qend", "sstart", "send", "evalue","bitscore", "sstrand"))
# cargar el genoma de referencia en formato fasta
genome <- readDNAStringSet(path_genoma_refencia)
plot_circular_read_genoma <- function(path_genoma_refencia,path_blast,nombre_plot){
# cargar el genoma de referencia en formato fasta
genome <- readDNAStringSet(path_genoma_refencia)
combined_table_plasmid_temp<- combine_tables(path_blast)
# crear un objeto de cromosomas a partir del genoma de referencia
chromosomes <- data.frame(start = c(1, cumsum(width(genome)[-length(genome)]) + 1),
end = cumsum(width(genome)),
label = names(genome))
rownames(chromosomes) <- chromosomes$label
df2_corted = combined_table_plasmid_temp[,c("sseqid", "sstart", "send", "sstrand")]
#función para intercambiar "sstart" y "send" si "sstrand" es "minus"
df2_corted <- intercambiar_sstart_send(df2_corted)
svg(paste0("plots/",nombre_plot))
circos.clear()
circos.initializeCircularGenome(chromosomes$label, genome_size = chromosomes$end, plotType = c("axis","labels"))
circos.genomicTrack(df2_corted, ylim = c(0, 1), panel.fun = function(region, value, ...) {
circos.genomicLines(region, value = runif(nrow(region)), type = "segment",
col = ifelse(value[, 1] == "plus", "Red", "blue"))
})
# Añadir nombre del genoma de referencia
#circos.text("Genoma de Referencia", facing = "inside", niceFacing = TRUE, cex = 2)
dev.off()
}
plot_circular_read_genoma("~/clavibacter/genomes/genomas_seleccionados/output/archivos_separados/plasmidos/NC_009478.1_Clavibacter_michiganensis_plasmid.fasta","~/clavibacter/blast/outputs/NC_009478.1_Clavibacter_michiganensis_plasmid/","plamid_1.svg")
combine_tables <- function(folder_path) {
# List all files in the folder
file_names <- list.files(path = folder_path, full.names = TRUE)
# Check if there are any files in the folder
if (length(file_names) == 0) {
stop("No files found in the folder.")
}
# Read all tables and combine them
combined_table <- do.call(rbind, lapply(file_names, read.table, header = FALSE, col.names= c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen","qstart", "qend", "sstart", "send", "evalue","bitscore", "sstrand")))
return(combined_table)
}
plot_circular_read_genoma <- function(path_genoma_refencia,path_blast,nombre_plot){
# cargar el genoma de referencia en formato fasta
genome <- readDNAStringSet(path_genoma_refencia)
combined_table_plasmid_temp<- combine_tables(path_blast)
# crear un objeto de cromosomas a partir del genoma de referencia
chromosomes <- data.frame(start = c(1, cumsum(width(genome)[-length(genome)]) + 1),
end = cumsum(width(genome)),
label = names(genome))
rownames(chromosomes) <- chromosomes$label
df2_corted = combined_table_plasmid_temp[,c("sseqid", "sstart", "send", "sstrand")]
#función para intercambiar "sstart" y "send" si "sstrand" es "minus"
df2_corted <- intercambiar_sstart_send(df2_corted)
svg(paste0("plots/",nombre_plot))
circos.clear()
circos.initializeCircularGenome(chromosomes$label, genome_size = chromosomes$end, plotType = c("axis","labels"))
circos.genomicTrack(df2_corted, ylim = c(0, 1), panel.fun = function(region, value, ...) {
circos.genomicLines(region, value = runif(nrow(region)), type = "segment",
col = ifelse(value[, 1] == "plus", "Red", "blue"))
})
# Añadir nombre del genoma de referencia
#circos.text("Genoma de Referencia", facing = "inside", niceFacing = TRUE, cex = 2)
dev.off()
}
plot_circular_read_genoma("~/clavibacter/genomes/genomas_seleccionados/output/archivos_separados/genoma_completo/NZ_CP086346.1_Clavibacter_nebraskensis_chromosome,.fasta","~/clavibacter/blast/outputs/NZ_CP086346.1_Clavibacter_nebraskensis_chromosome,/","Clavibacter_to_Nebraskensis.svg")
plot_circular_read_genoma("~/clavibacter/genomes/genomas_seleccionados/output/archivos_separados/genoma_completo/NZ_CP086346.1_Clavibacter_nebraskensis_chromosome,.fasta","~/clavibacter/blast/outputs/NZ_CP086346.1_Clavibacter_nebraskensis_chromosome,/todos/","Clavibacter_to_Nebraskensis.svg")
intercambiar_sstart_send <- function(df) {
for (i in 1:nrow(df)) {
if (df$sstrand[i] == "minus") {
temp <- df$sstart[i]
df$sstart[i] <- df$send[i]
df$send[i] <- temp
}
}
return(df)
}
library(Biostrings)
library(circlize)
library(data.table)
library(dplyr)
library(Biostrings)
library(circlize)
library(data.table)
library(dplyr)
intercambiar_sstart_send <- function(df) {
for (i in 1:nrow(df)) {
if (df$sstrand[i] == "minus") {
temp <- df$sstart[i]
df$sstart[i] <- df$send[i]
df$send[i] <- temp
}
}
return(df)
}
combine_tables <- function(folder_path) {
# List all files in the folder
file_names <- list.files(path = folder_path, full.names = TRUE)
# Check if there are any files in the folder
if (length(file_names) == 0) {
stop("No files found in the folder.")
}
# Read all tables and combine them
combined_table <- do.call(rbind, lapply(file_names, read.table, header = FALSE, col.names= c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen","qstart", "qend", "sstart", "send", "evalue","bitscore", "sstrand")))
return(combined_table)
}
plot_circular_read_genoma <- function(path_genoma_refencia,path_blast,nombre_plot){
# cargar el genoma de referencia en formato fasta
genome <- readDNAStringSet(path_genoma_refencia)
combined_table_plasmid_temp<- combine_tables(path_blast)
# crear un objeto de cromosomas a partir del genoma de referencia
chromosomes <- data.frame(start = c(1, cumsum(width(genome)[-length(genome)]) + 1),
end = cumsum(width(genome)),
label = names(genome))
rownames(chromosomes) <- chromosomes$label
df2_corted = combined_table_plasmid_temp[,c("sseqid", "sstart", "send", "sstrand")]
#función para intercambiar "sstart" y "send" si "sstrand" es "minus"
df2_corted <- intercambiar_sstart_send(df2_corted)
svg(paste0("plots/",nombre_plot))
circos.clear()
circos.initializeCircularGenome(chromosomes$label, genome_size = chromosomes$end, plotType = c("axis","labels"))
circos.genomicTrack(df2_corted, ylim = c(0, 1), panel.fun = function(region, value, ...) {
circos.genomicLines(region, value = runif(nrow(region)), type = "segment",
col = ifelse(value[, 1] == "plus", "Red", "blue"))
})
# Añadir nombre del genoma de referencia
#circos.text("Genoma de Referencia", facing = "inside", niceFacing = TRUE, cex = 2)
dev.off()
}
plot_circular_read_genoma("~/clavibacter/genomes/genomas_seleccionados/output/archivos_separados/genoma_completo/NZ_CP086346.1_Clavibacter_nebraskensis_chromosome,.fasta","~/clavibacter/blast/outputs/NZ_CP086346.1_Clavibacter_nebraskensis_chromosome,/todos/","Clavibacter_to_Nebraskensis.svg")
plot_circular_read_genoma("~/clavibacter/genomes/genomas_seleccionados/output/archivos_separados/genoma_completo/NZ_CP088266.1_Clavibacter_sepedonicus_chromosome,.fasta","~/clavibacter/blast/outputs/NZ_CP088266.1_Clavibacter_sepedonicus_chromosome,/todos/","Clavibacter_to_Sepedonicus.svg")
plot_circular_read_genoma("~/clavibacter/genomes/genomas_seleccionados/output/archivos_separados/NZ_MZMQ01000001.1_Clavibacter_tessellarius_33566.fasta","~/clavibacter/blast/outputs/NZ_MZMQ01000001.1_Clavibacter_tessellarius_33566/todos/","Clavibacter_to_tessellarius.svg")
temp<-combine_tables("~/clavibacter/genomes/genomas_seleccionados/output/archivos_separados/NZ_MZMQ01000001.1_Clavibacter_tessellarius_33566.fasta")
temp<-combine_tables("~/clavibacter/blast/outputs/NZ_MZMQ01000001.1_Clavibacter_tessellarius_33566/todos/")
View(temp)
View(temp)
subset(temp, pident > 80)
View(temp)
View(temp)
type(temp)
View(temp)
write.table("tablas//",temp)
write.table()
?write.table()
write.table(temp,"tablas/temp")
write.table(temp,"tablas/"+nombre_tabla)
temp<-combine_tables(folder_path)
write.table(temp,"tablas/"+"nombre_tabla")
write.table(temp,paste0("tablas/",nombre_tabla)
}
write.table(temp,paste0("tablas/",nombre_tabla))
combine_tables2("~/clavibacter/blast/outputs/NZ_MZMQ01000001.1_Clavibacter_tessellarius_33566/todos/","Clavibacter_tessellarius")
combine_tables2 <- function(folder_path,nombre_tabla) {
temp<-combine_tables(folder_path)
write.table(temp,paste0("tablas/",nombre_tabla))
}
combine_tables2("~/clavibacter/blast/outputs/NZ_MZMQ01000001.1_Clavibacter_tessellarius_33566/todos/","Clavibacter_tessellarius")
knitr::opts_chunk$set(echo = TRUE)
archivos <- list.files("~/clavibacter/blast/outputs/")
archivos
combine_tables2(archivo,archivo)
combine_tables2(paste("~/clavibacter/blast/outputs/",archivo),archivo)
combine_tables2(paste0("~/clavibacter/blast/outputs/",archivo),archivo)
combine_tables2(paste("~/clavibacter/blast/outputs",archivo, sep = "/"),archivo)
paste("~/clavibacter/blast/outputs",archivos(0))
archivos
archivos[0]
archivos[1]
for i in archivos
for (k in archivos){i}
for (k in archivos){k}
paste("~/clavibacter/blast/outputs","NZ_MZMQ01000001.1_Clavibacter_tessellarius_33566")
paste("~/clavibacter/blast/outputs/","NZ_MZMQ01000001.1_Clavibacter_tessellarius_33566")
paste0("~/clavibacter/blast/outputs/","NZ_MZMQ01000001.1_Clavibacter_tessellarius_33566")
combine_tables2(paste0("~/clavibacter/blast/outputs",archivo,archivo)
}
combine_tables2(paste0("~/clavibacter/blast/outputs",archivo),archivo)
combine_tables2(paste0("~/clavibacter/blast/outputs",lista),lista)
#combine_tables2(paste0("~/clavibacter/blast/outputs",elemento),elemento)
print(elemento)
print(elemento)}
for (elemento in archivos){print(elemento)} #combine_tables2(paste0("~/clavibacter/blast/outputs",elemento),elemento)
for (elemento in archivos){#combine_tables2(paste0("~/clavibacter/blast/outputs",elemento),elemento)}
for (elemento in archivos){combine_tables2(paste0("~/clavibacter/blast/outputs",elemento),elemento)}
print(elemento)}
print(paste0("~/clavibacter/blast/outputs",elemento))}
for (elemento in archivos){#combine_tables2(paste0("~/clavibacter/blast/outputs",elemento),elemento);
print(paste0("~/clavibacter/blast/outputs",elemento))}
print(paste0("~/clavibacter/blast/outputs/",elemento))}
print(paste0("~/clavibacter/blast/outputs",elemento))}
print(paste0("~/clavibacter/blast/outputs",elemento))}
for (elemento in archivos){print(paste0("~/clavibacter/blast/outputs",elemento))}
for (elemento in archivos){print(paste0("~/clavibacter/blast/outputs/",elemento))}
for (elemento in archivos){combine_tables2(paste0("~/clavibacter/blast/outputs/",elemento),elemento)}
for (elemento in archivos){combine_tables2(paste0("~/clavibacter/blast/outputs/",elemento),elemento)}
for (elemento in archivos){combine_tables2(paste0("~/clavibacter/blast/outputs/",elemento),elemento)}
for (elemento in archivos){combine_tables2(paste0("~/clavibacter/blast/outputs/",elemento),elemento)}
archivos <- list.files("~/clavibacter/blast/outputs/")
for (elemento in archivos){combine_tables2(paste0("~/clavibacter/blast/outputs/",elemento),elemento)}
archivos
paste0("~/clavibacter/blast/outputs/","NZ_MZMQ01000001.1_Clavibacter_tessellarius_33566" )
paste0("~/clavibacter/blast/outputs/","NZ_MZMQ01000001.1_Clavibacter_tessellarius_33566","/todos/" )
for (elemento in archivos){combine_tables2(paste0("~/clavibacter/blast/outputs/",elemento,"/todos/"),elemento)}
temp
temp$qseqid
unique(temp$qseqid)
length(unique(temp$qseqid))
length(unique(temp$sseqid))
# cargamos librerias
library("phyloseq")
library("ggplot2")
library("igraph")
library("vegan")
library("GUniFrac")
library("pbkrtest")
library("phyloseq")
library("RColorBrewer")
library("patchwork")
#library("BiodiversityR")
setwd("/home/shaday/GIT/ccm-bioinfomatica-lab/Hackaton_junio2023/data/")
solena=import_biom("all_data_010623.biom")
todos=import_biom("all_data_010623.biom")
setwd("/home/shaday/GIT/ccm-bioinfomatica-lab/Hackaton_junio2023/data/")
todos
todos=import_biom("all_data_010623.biom")
library(phytools)
install.packages("phytools")
library(phangorn)
library(ape)
library(phytools)
fraxatin <- read.phyDat(file = "~/GIT/temp/all_allig.fasta",
format = "FASTA", type = "AA")
fraxatin
matrizdist <- as.AAbin(fraxatin)
matrizdist <- dist.aa(matrizdist)
matrizdist
arbolUPGMA <- upgma(matrizdist)
plot(arbolUPGMA)
arbolNJ <- nj(matrizdist)
plot(arbolNJ)
arbolUPGMA <- upgma(matrizdist)
plot(arbolUPGMA)
